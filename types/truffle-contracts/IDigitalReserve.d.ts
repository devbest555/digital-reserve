/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IDigitalReserveContract
  extends Truffle.Contract<IDigitalReserveInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDigitalReserveInstance>;
}

export interface Deposit {
  name: "Deposit";
  args: {
    user: string;
    amount: BN;
    podMinted: BN;
    podTotalSupply: BN;
    tokensStored: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface SetToken {
  name: "SetToken";
  args: {
    oldTokenA: string;
    oldTokenB: string;
    newTokenA: string;
    newTokenB: string;
    tokensStored: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
  };
}

export interface Withdraw {
  name: "Withdraw";
  args: {
    user: string;
    amount: BN;
    fees: BN;
    podBurned: BN;
    podTotalSupply: BN;
    tokensStored: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

type AllEvents = Deposit | SetToken | Withdraw;

export interface IDigitalReserveInstance extends Truffle.ContractInstance {
  /**
   * Returns withdrawal withdrawal fee.
   */
  withdrawalFee(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * Returns Proof of Deposit price decimal. Price should be displayed as `price / (10 ** priceDecimals)`.
   */
  priceDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns total strategy tokens stored in an array. The output amount sequence is the strategyTokens() array sequence.
   */
  totalTokenStored(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns how much user's vault share in DRC amount.
   * @param user Address of a DR user
   */
  getUserVaultInDrc(
    user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * Proof of Deposit net unit worth.
   */
  getProofOfDepositPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Deposit DRC to DR.
   * @param deadline Unix timestamp after which the transaction will revert.
   * @param drcAmount DRC amount user want to deposit.
   */
  depositDrc: {
    (
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw DRC from DR.
   * @param deadline Unix timestamp after which the transaction will revert.
   * @param drcAmount DRC amount user want to withdraw.
   */
  withdrawDrc: {
    (
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      drcAmount: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw a percentage of holding from DR.
   * @param deadline Unix timestamp after which the transaction will revert.
   * @param percentage Percentage of holding user want to withdraw.
   */
  withdrawPercentage: {
    (
      percentage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      percentage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      percentage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      percentage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Returns withdrawal withdrawal fee.
     */
    withdrawalFee(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * Returns Proof of Deposit price decimal. Price should be displayed as `price / (10 ** priceDecimals)`.
     */
    priceDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns total strategy tokens stored in an array. The output amount sequence is the strategyTokens() array sequence.
     */
    totalTokenStored(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns how much user's vault share in DRC amount.
     * @param user Address of a DR user
     */
    getUserVaultInDrc(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * Proof of Deposit net unit worth.
     */
    getProofOfDepositPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Deposit DRC to DR.
     * @param deadline Unix timestamp after which the transaction will revert.
     * @param drcAmount DRC amount user want to deposit.
     */
    depositDrc: {
      (
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw DRC from DR.
     * @param deadline Unix timestamp after which the transaction will revert.
     * @param drcAmount DRC amount user want to withdraw.
     */
    withdrawDrc: {
      (
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        drcAmount: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw a percentage of holding from DR.
     * @param deadline Unix timestamp after which the transaction will revert.
     * @param percentage Percentage of holding user want to withdraw.
     */
    withdrawPercentage: {
      (
        percentage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        percentage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        percentage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        percentage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
