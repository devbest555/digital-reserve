/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILendingPoolContract
  extends Truffle.Contract<ILendingPoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILendingPoolInstance>;
}

export interface Borrow {
  name: "Borrow";
  args: {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: BN;
    borrowRateMode: BN;
    borrowRate: BN;
    referral: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

export interface Deposit {
  name: "Deposit";
  args: {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: BN;
    referral: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface FlashLoan {
  name: "FlashLoan";
  args: {
    target: string;
    initiator: string;
    asset: string;
    amount: BN;
    premium: BN;
    referralCode: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface LiquidationCall {
  name: "LiquidationCall";
  args: {
    collateralAsset: string;
    debtAsset: string;
    user: string;
    debtToCover: BN;
    liquidatedCollateralAmount: BN;
    liquidator: string;
    receiveAToken: boolean;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
    6: boolean;
  };
}

export interface Paused {
  name: "Paused";
  args: {};
}

export interface RebalanceStableBorrowRate {
  name: "RebalanceStableBorrowRate";
  args: {
    reserve: string;
    user: string;
    0: string;
    1: string;
  };
}

export interface Repay {
  name: "Repay";
  args: {
    reserve: string;
    user: string;
    repayer: string;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface ReserveDataUpdated {
  name: "ReserveDataUpdated";
  args: {
    reserve: string;
    liquidityRate: BN;
    stableBorrowRate: BN;
    variableBorrowRate: BN;
    liquidityIndex: BN;
    variableBorrowIndex: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface ReserveUsedAsCollateralDisabled {
  name: "ReserveUsedAsCollateralDisabled";
  args: {
    reserve: string;
    user: string;
    0: string;
    1: string;
  };
}

export interface ReserveUsedAsCollateralEnabled {
  name: "ReserveUsedAsCollateralEnabled";
  args: {
    reserve: string;
    user: string;
    0: string;
    1: string;
  };
}

export interface Swap {
  name: "Swap";
  args: {
    reserve: string;
    user: string;
    rateMode: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {};
}

export interface Withdraw {
  name: "Withdraw";
  args: {
    reserve: string;
    user: string;
    to: string;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

type AllEvents =
  | Borrow
  | Deposit
  | FlashLoan
  | LiquidationCall
  | Paused
  | RebalanceStableBorrowRate
  | Repay
  | ReserveDataUpdated
  | ReserveUsedAsCollateralDisabled
  | ReserveUsedAsCollateralEnabled
  | Swap
  | Unpaused
  | Withdraw;

export interface ILendingPoolInstance extends Truffle.ContractInstance {
  /**
   * Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC
   * @param amount The amount to be deposited
   * @param asset The address of the underlying asset to deposit
   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*
   */
  deposit: {
    (
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC
   * @param amount The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance
   * @param asset The address of the underlying asset to withdraw
   * @param to Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet
   */
  withdraw: {
    (
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`
   * @param amount The amount to be borrowed
   * @param asset The address of the underlying asset to borrow
   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man
   */
  borrow: {
    (
      asset: string,
      amount: number | BN | string,
      interestRateMode: number | BN | string,
      referralCode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      interestRateMode: number | BN | string,
      referralCode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      interestRateMode: number | BN | string,
      referralCode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      interestRateMode: number | BN | string,
      referralCode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
   * @param amount The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
   * @param asset The address of the borrowed underlying asset previously borrowed
   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed
   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
   */
  repay: {
    (
      asset: string,
      amount: number | BN | string,
      rateMode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      rateMode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      rateMode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      rateMode: number | BN | string,
      onBehalfOf: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows a borrower to swap his debt between stable and variable mode, or viceversa
   * @param asset The address of the underlying asset borrowed
   * @param rateMode The rate mode that the user wants to swap to*
   */
  swapBorrowRateMode: {
    (
      asset: string,
      rateMode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      rateMode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      rateMode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      rateMode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough
   * @param asset The address of the underlying asset borrowed
   * @param user The address of the user to be rebalanced*
   */
  rebalanceStableBorrowRate: {
    (
      asset: string,
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows depositors to enable/disable a specific deposited asset as collateral
   * @param asset The address of the underlying asset deposited
   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise*
   */
  setUserUseReserveAsCollateral: {
    (
      asset: string,
      useAsCollateral: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      useAsCollateral: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      useAsCollateral: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      useAsCollateral: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*
   * @param user The address of the borrower getting liquidated
   */
  liquidationCall: {
    (
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: number | BN | string,
      receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: number | BN | string,
      receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: number | BN | string,
      receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: number | BN | string,
      receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
   * @param amounts The amounts amounts being flash-borrowed
   * @param assets The addresses of the assets being flash-borrowed
   * @param modes Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
   * @param params Variadic packed params to pass to the receiver as extra information
   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*
   */
  flashLoan: {
    (
      receiverAddress: string,
      assets: string[],
      amounts: (number | BN | string)[],
      modes: (number | BN | string)[],
      onBehalfOf: string,
      params: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      receiverAddress: string,
      assets: string[],
      amounts: (number | BN | string)[],
      modes: (number | BN | string)[],
      onBehalfOf: string,
      params: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      receiverAddress: string,
      assets: string[],
      amounts: (number | BN | string)[],
      modes: (number | BN | string)[],
      onBehalfOf: string,
      params: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiverAddress: string,
      assets: string[],
      amounts: (number | BN | string)[],
      modes: (number | BN | string)[],
      onBehalfOf: string,
      params: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the user account data across all the reserves
   * @param user The address of the user
   */
  getUserAccountData(
    user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN }>;

  initReserve: {
    (
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReserveInterestRateStrategyAddress: {
    (
      reserve: string,
      rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      reserve: string,
      rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      reserve: string,
      rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      reserve: string,
      rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setConfiguration: {
    (
      reserve: string,
      configuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      reserve: string,
      configuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      reserve: string,
      configuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      reserve: string,
      configuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the configuration of the reserve
   * @param asset The address of the underlying asset of the reserve
   */
  getConfiguration(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ data: BN }>;

  /**
   * Returns the configuration of the user across all the reserves
   * @param user The user address
   */
  getUserConfiguration(
    user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ data: BN }>;

  /**
   * Returns the normalized income normalized income of the reserve
   * @param asset The address of the underlying asset of the reserve
   */
  getReserveNormalizedIncome(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the normalized variable debt per unit of asset
   * @param asset The address of the underlying asset of the reserve
   */
  getReserveNormalizedVariableDebt(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the state and configuration of the reserve
   * @param asset The address of the underlying asset of the reserve
   */
  getReserveData(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    configuration: { data: BN };
    liquidityIndex: BN;
    variableBorrowIndex: BN;
    currentLiquidityRate: BN;
    currentVariableBorrowRate: BN;
    currentStableBorrowRate: BN;
    lastUpdateTimestamp: BN;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: BN;
  }>;

  finalizeTransfer: {
    (
      asset: string,
      from: string,
      to: string,
      amount: number | BN | string,
      balanceFromAfter: number | BN | string,
      balanceToBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      from: string,
      to: string,
      amount: number | BN | string,
      balanceFromAfter: number | BN | string,
      balanceToBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      from: string,
      to: string,
      amount: number | BN | string,
      balanceFromAfter: number | BN | string,
      balanceToBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      from: string,
      to: string,
      amount: number | BN | string,
      balanceFromAfter: number | BN | string,
      balanceToBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getReservesList(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getAddressesProvider(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setPause: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  methods: {
    /**
     * Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC
     * @param amount The amount to be deposited
     * @param asset The address of the underlying asset to deposit
     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet
     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*
     */
    deposit: {
      (
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC
     * @param amount The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance
     * @param asset The address of the underlying asset to withdraw
     * @param to Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet
     */
    withdraw: {
      (
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`
     * @param amount The amount to be borrowed
     * @param asset The address of the underlying asset to borrow
     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*
     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man
     */
    borrow: {
      (
        asset: string,
        amount: number | BN | string,
        interestRateMode: number | BN | string,
        referralCode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        interestRateMode: number | BN | string,
        referralCode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        interestRateMode: number | BN | string,
        referralCode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        interestRateMode: number | BN | string,
        referralCode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
     * @param amount The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
     * @param asset The address of the borrowed underlying asset previously borrowed
     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed
     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
     */
    repay: {
      (
        asset: string,
        amount: number | BN | string,
        rateMode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        rateMode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        rateMode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        rateMode: number | BN | string,
        onBehalfOf: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows a borrower to swap his debt between stable and variable mode, or viceversa
     * @param asset The address of the underlying asset borrowed
     * @param rateMode The rate mode that the user wants to swap to*
     */
    swapBorrowRateMode: {
      (
        asset: string,
        rateMode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        rateMode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        rateMode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        rateMode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough
     * @param asset The address of the underlying asset borrowed
     * @param user The address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate: {
      (
        asset: string,
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows depositors to enable/disable a specific deposited asset as collateral
     * @param asset The address of the underlying asset deposited
     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise*
     */
    setUserUseReserveAsCollateral: {
      (
        asset: string,
        useAsCollateral: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        useAsCollateral: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        useAsCollateral: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        useAsCollateral: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*
     * @param user The address of the borrower getting liquidated
     */
    liquidationCall: {
      (
        collateralAsset: string,
        debtAsset: string,
        user: string,
        debtToCover: number | BN | string,
        receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        collateralAsset: string,
        debtAsset: string,
        user: string,
        debtToCover: number | BN | string,
        receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        collateralAsset: string,
        debtAsset: string,
        user: string,
        debtToCover: number | BN | string,
        receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        collateralAsset: string,
        debtAsset: string,
        user: string,
        debtToCover: number | BN | string,
        receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param amounts The amounts amounts being flash-borrowed
     * @param assets The addresses of the assets being flash-borrowed
     * @param modes Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
     * @param params Variadic packed params to pass to the receiver as extra information
     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface
     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*
     */
    flashLoan: {
      (
        receiverAddress: string,
        assets: string[],
        amounts: (number | BN | string)[],
        modes: (number | BN | string)[],
        onBehalfOf: string,
        params: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        receiverAddress: string,
        assets: string[],
        amounts: (number | BN | string)[],
        modes: (number | BN | string)[],
        onBehalfOf: string,
        params: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        receiverAddress: string,
        assets: string[],
        amounts: (number | BN | string)[],
        modes: (number | BN | string)[],
        onBehalfOf: string,
        params: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        receiverAddress: string,
        assets: string[],
        amounts: (number | BN | string)[],
        modes: (number | BN | string)[],
        onBehalfOf: string,
        params: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the user account data across all the reserves
     * @param user The address of the user
     */
    getUserAccountData(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN }>;

    initReserve: {
      (
        reserve: string,
        aTokenAddress: string,
        stableDebtAddress: string,
        variableDebtAddress: string,
        interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        reserve: string,
        aTokenAddress: string,
        stableDebtAddress: string,
        variableDebtAddress: string,
        interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        reserve: string,
        aTokenAddress: string,
        stableDebtAddress: string,
        variableDebtAddress: string,
        interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        reserve: string,
        aTokenAddress: string,
        stableDebtAddress: string,
        variableDebtAddress: string,
        interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setReserveInterestRateStrategyAddress: {
      (
        reserve: string,
        rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        reserve: string,
        rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        reserve: string,
        rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        reserve: string,
        rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setConfiguration: {
      (
        reserve: string,
        configuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        reserve: string,
        configuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        reserve: string,
        configuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        reserve: string,
        configuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the configuration of the reserve
     * @param asset The address of the underlying asset of the reserve
     */
    getConfiguration(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ data: BN }>;

    /**
     * Returns the configuration of the user across all the reserves
     * @param user The user address
     */
    getUserConfiguration(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ data: BN }>;

    /**
     * Returns the normalized income normalized income of the reserve
     * @param asset The address of the underlying asset of the reserve
     */
    getReserveNormalizedIncome(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the normalized variable debt per unit of asset
     * @param asset The address of the underlying asset of the reserve
     */
    getReserveNormalizedVariableDebt(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the state and configuration of the reserve
     * @param asset The address of the underlying asset of the reserve
     */
    getReserveData(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      configuration: { data: BN };
      liquidityIndex: BN;
      variableBorrowIndex: BN;
      currentLiquidityRate: BN;
      currentVariableBorrowRate: BN;
      currentStableBorrowRate: BN;
      lastUpdateTimestamp: BN;
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      interestRateStrategyAddress: string;
      id: BN;
    }>;

    finalizeTransfer: {
      (
        asset: string,
        from: string,
        to: string,
        amount: number | BN | string,
        balanceFromAfter: number | BN | string,
        balanceToBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        from: string,
        to: string,
        amount: number | BN | string,
        balanceFromAfter: number | BN | string,
        balanceToBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        from: string,
        to: string,
        amount: number | BN | string,
        balanceFromAfter: number | BN | string,
        balanceToBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        from: string,
        to: string,
        amount: number | BN | string,
        balanceFromAfter: number | BN | string,
        balanceToBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getReservesList(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getAddressesProvider(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setPause: {
      (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        val: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        val: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
