/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILendingPoolAddressesProviderContract
  extends Truffle.Contract<ILendingPoolAddressesProviderInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ILendingPoolAddressesProviderInstance>;
}

export interface AddressSet {
  name: "AddressSet";
  args: {
    id: string;
    newAddress: string;
    hasProxy: boolean;
    0: string;
    1: string;
    2: boolean;
  };
}

export interface ConfigurationAdminUpdated {
  name: "ConfigurationAdminUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface EmergencyAdminUpdated {
  name: "EmergencyAdminUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface LendingPoolCollateralManagerUpdated {
  name: "LendingPoolCollateralManagerUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface LendingPoolConfiguratorUpdated {
  name: "LendingPoolConfiguratorUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface LendingPoolUpdated {
  name: "LendingPoolUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface LendingRateOracleUpdated {
  name: "LendingRateOracleUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface MarketIdSet {
  name: "MarketIdSet";
  args: {
    newMarketId: string;
    0: string;
  };
}

export interface PriceOracleUpdated {
  name: "PriceOracleUpdated";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface ProxyCreated {
  name: "ProxyCreated";
  args: {
    id: string;
    newAddress: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | AddressSet
  | ConfigurationAdminUpdated
  | EmergencyAdminUpdated
  | LendingPoolCollateralManagerUpdated
  | LendingPoolConfiguratorUpdated
  | LendingPoolUpdated
  | LendingRateOracleUpdated
  | MarketIdSet
  | PriceOracleUpdated
  | ProxyCreated;

export interface ILendingPoolAddressesProviderInstance
  extends Truffle.ContractInstance {
  getMarketId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setMarketId: {
    (marketId: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      marketId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      marketId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      marketId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAddress: {
    (
      id: string,
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: string,
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: string,
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: string,
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAddressAsProxy: {
    (id: string, impl: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      id: string,
      impl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: string,
      impl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: string,
      impl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAddress(
    id: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getLendingPool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setLendingPoolImpl: {
    (pool: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(pool: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      pool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLendingPoolConfigurator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setLendingPoolConfiguratorImpl: {
    (configurator: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      configurator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      configurator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      configurator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLendingPoolCollateralManager(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setLendingPoolCollateralManager: {
    (manager: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      manager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      manager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      manager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPoolAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setPoolAdmin: {
    (admin: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(admin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      admin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      admin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getEmergencyAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setEmergencyAdmin: {
    (admin: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(admin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      admin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      admin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPriceOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setPriceOracle: {
    (priceOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      priceOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      priceOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      priceOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLendingRateOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setLendingRateOracle: {
    (
      lendingRateOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      lendingRateOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lendingRateOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lendingRateOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getMarketId(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setMarketId: {
      (marketId: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        marketId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        marketId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        marketId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAddress: {
      (
        id: string,
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: string,
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: string,
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: string,
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAddressAsProxy: {
      (
        id: string,
        impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: string,
        impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: string,
        impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: string,
        impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAddress(
      id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getLendingPool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setLendingPoolImpl: {
      (pool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(pool: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLendingPoolConfigurator(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setLendingPoolConfiguratorImpl: {
      (configurator: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        configurator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        configurator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        configurator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLendingPoolCollateralManager(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setLendingPoolCollateralManager: {
      (manager: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        manager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        manager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        manager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getPoolAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setPoolAdmin: {
      (admin: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        admin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        admin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        admin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getEmergencyAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setEmergencyAdmin: {
      (admin: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        admin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        admin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        admin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getPriceOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setPriceOracle: {
      (priceOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        priceOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        priceOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        priceOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLendingRateOracle(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setLendingRateOracle: {
      (
        lendingRateOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        lendingRateOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        lendingRateOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        lendingRateOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
